using GhabzeTo.Domain.Core;
using GhabzeTo.Domain.Models;
using GhabzeTo.Domain.Models.Logs;
using GhabzeTo.Infra.Data.Core.Uow;
using GhabzeTo.Infra.Data.EF.DTOs;
using Microsoft.EntityFrameworkCore;
<<<<<<< HEAD
using System;
=======
>>>>>>> WalkingSkeleton
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore.Metadata.Internal;

namespace GhabzeTo.Infra.Data.EF.Uow
{
    public class EfUnitOfWork : DbContext, IUnitOfWork
    {
        public EfUnitOfWork(DbContextOptions options)
            : base(options)
        { }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            AddModels(modelBuilder);
            base.OnModelCreating(modelBuilder);
        }

        private void AddModels(ModelBuilder modelBuilder)
        {
            //DbSets
            var entityMethod = modelBuilder.GetType().GetMethods().FirstOrDefault(x => x.Name.Contains("Entity") && x.IsGenericMethod == true);

            var newTypes = typeof(Test).Assembly.GetTypes();

            var types = newTypes
                .Where(x => !x.IsAbstract
                            && x.IsClass
                            && ((!x.BaseType.IsGenericType && x.BaseType == typeof(Entity))
                                    || (x.BaseType.IsGenericType && (x.BaseType.GetGenericTypeDefinition() == typeof(Entity<>) || x.BaseType.GetGenericTypeDefinition() == typeof(IEntity<>))))
                      )
                .ToList();

            foreach (var type in types)
            {
                entityMethod.MakeGenericMethod(type).Invoke(modelBuilder, new object[] { });
            }

            //Mappings
            modelBuilder.ApplyConfigurationsFromAssembly(GetType().Assembly);
        }

        #region UnitOfWorkImplementation

        public override int SaveChanges(bool acceptAllChangesOnSuccess)
        {

            var auditEntries = OnBeforeSaveChanges();
            var result = base.SaveChanges(acceptAllChangesOnSuccess);
            OnAfterSaveChanges(auditEntries);
            return result;
        }

        public override async Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = new CancellationToken())
        {
            var auditEntries = OnBeforeSaveChanges();
            var result = await base.SaveChangesAsync(acceptAllChangesOnSuccess, cancellationToken);
            await OnAfterSaveChangesAsync(auditEntries);
            return result;
        }

        private List<AuditEntry> OnBeforeSaveChanges()
        {
            ChangeTracker.DetectChanges();
            var auditEntries = new List<AuditEntry>();
            foreach (var entry in ChangeTracker.Entries())
            {
                if (entry.Entity is Audit || entry.State == EntityState.Detached || entry.State == EntityState.Unchanged || entry.State == EntityState.Added)
                    continue;

                var auditEntry = new AuditEntry(entry);
                auditEntry.TableName = entry.Metadata.Relational().TableName;
                auditEntries.Add(auditEntry);

                foreach (var property in entry.Properties)
                {
                    if (property.IsTemporary)
                    {
                        // value will be generated by the database, get the value after saving
                        auditEntry.TemporaryProperties.Add(property);
                        continue;
                    }

                    string propertyName = property.Metadata.Name;
                    if (property.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues[propertyName] = property.CurrentValue;
                        continue;
                    }

                    switch (entry.State)
                    {
                        case EntityState.Deleted:
                            auditEntry.OldValues[propertyName] = property.OriginalValue;
                            break;

                        case EntityState.Modified:
                            if (property.IsModified)
                            {
                                auditEntry.OldValues[propertyName] = property.OriginalValue;
                                auditEntry.NewValues[propertyName] = property.CurrentValue;
                            }
                            break;
                    }
                }
            }

            // Save audit entities that have all the modifications
            foreach (var auditEntry in auditEntries.Where(_ => !_.HasTemporaryProperties))
            {
                Set<Audit>().Add(auditEntry.ToAudit());
            }

            // keep a list of entries where the value of some properties are unknown at this step
            return auditEntries.Where(_ => _.HasTemporaryProperties).ToList(); ;
        }

        private Task OnAfterSaveChangesAsync(List<AuditEntry> auditEntries)
        {
            if (auditEntries == null || auditEntries.Count == 0)
                return Task.CompletedTask;


            foreach (var auditEntry in auditEntries)
            {
                // Get the final value of the temporary properties
                foreach (var prop in auditEntry.TemporaryProperties)
                {
                    if (prop.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                    else
                    {
                        auditEntry.NewValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                }

                // Save the Audit entry
                this.Set<Audit>().Add(auditEntry.ToAudit());
            }

            return this.BulkSaveChangesAsync();
        }

        private void OnAfterSaveChanges(List<AuditEntry> auditEntries)
        {
            if (auditEntries == null || auditEntries.Count == 0)
                return;


            foreach (var auditEntry in auditEntries)
            {
                // Get the final value of the temporary properties
                foreach (var prop in auditEntry.TemporaryProperties)
                {
                    if (prop.Metadata.IsPrimaryKey())
                    {
                        auditEntry.KeyValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                    else
                    {
                        auditEntry.NewValues[prop.Metadata.Name] = prop.CurrentValue;
                    }
                }

                // Save the Audit entry
                this.Set<Audit>().Add(auditEntry.ToAudit());
            }

            this.BulkSaveChanges();
        }

        public string GetConnectionString()
        {
            return this.Database.GetDbConnection().ConnectionString;
        }

        public void BulkSaveChange()
        {
            var auditEntries = OnBeforeSaveChanges();
            this.BulkSaveChanges();
            OnAfterSaveChanges(auditEntries);
        }

        public async Task BulkSaveChangeAsync()
        {
            var auditEntries = OnBeforeSaveChanges();
            await this.BulkSaveChangesAsync().ConfigureAwait(false);
            await OnAfterSaveChangesAsync(auditEntries).ConfigureAwait(false);
        }
    }

    #endregion
}
